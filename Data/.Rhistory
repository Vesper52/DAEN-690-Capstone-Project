number.responses.replicate = vector("numeric", number.patients)
number.responses = vector("numeric", number.replicates)
#set the seed for a pseudo-random sample
set.seed(2018) #simulate the trials
for(k in 1:number.replicates){
number.responses.replicate = sample(c(0,1),size = number.patients, prob = c(1 - response.prob, response.prob), replace = TRUE)
number.responses[k] = sum(number.responses.replicate)
}
table(number.responses)
barplot(table(number.responses))
with450 <- barplot(table(number.responses))
#Q6:
#load the data
library(oibiostat)
install.packages('oibiostat')
#Q6:
#load the data
library(oibiostat)
install.apckages('oibiostat')
install.packages('oibiostat')
?oibiostat
??oibiostat
?oi_biostat
install.packages("devtools")
library(devtools)
devtools::install_github("OI-Biostat/oi_biostat_data")
#Q6:
#load the data
library(oibiostat)
data("yrbss")
#Q6:
#load the data
library(oibiostat)
data("yrbss")
#set parameters
sample.size = 3 # Size of each sample
replicates = 1000 # Number of random samples
#set seed for pseudo-random sampling
set.seed(2021)
#create empty vector to store results
sample.means = vector("numeric", replicates) #calculate sample means
for(k in 1:replicates){
sample.rows = sample(1:nrow(yrbss), sample.size)
sample.means[k] = mean(yrbss$weight[sample.rows], na.rm = TRUE)
}
#create histogram of sample means
hist(sample.means, xlim = c(54, 87)) #xlim keeps the axis scale fixed
#draw a blue line at the mean of sample means
abline(v = mean(sample.means), col = "blue")
#draw a red line at the population mean weight in yrbss
abline(v = mean(yrbss$weight, na.rm = TRUE), col = "red")
#set parameters
sample.size = 500 # Size of each sample
replicates = 10000 # Number of random samples
#set seed for pseudo-random sampling
set.seed(2021)
#create empty vector to store results
sample.means = vector("numeric", replicates) #calculate sample means
for(k in 1:replicates){
sample.rows = sample(1:nrow(yrbss), sample.size)
sample.means[k] = mean(yrbss$weight[sample.rows], na.rm = TRUE)
}
#create histogram of sample means
hist(sample.means, xlim = c(54, 87)) #xlim keeps the axis scale fixed
#draw a blue line at the mean of sample means
abline(v = mean(sample.means), col = "blue")
#draw a red line at the population mean weight in yrbss
abline(v = mean(yrbss$weight, na.rm = TRUE), col = "red")
#set parameters
sample.size = 500 # Size of each sample
replicates = 30 # Number of random samples
#set seed for pseudo-random sampling
set.seed(2021)
#create empty vector to store results
sample.means = vector("numeric", replicates) #calculate sample means
for(k in 1:replicates){
sample.rows = sample(1:nrow(yrbss), sample.size)
sample.means[k] = mean(yrbss$weight[sample.rows], na.rm = TRUE)
}
#create histogram of sample means
hist(sample.means, xlim = c(54, 87)) #xlim keeps the axis scale fixed
#draw a blue line at the mean of sample means
abline(v = mean(sample.means), col = "blue")
#draw a red line at the population mean weight in yrbss
abline(v = mean(yrbss$weight, na.rm = TRUE), col = "red")
#set parameters
sample.size = 500 # Size of each sample
replicates = 5000 # Number of random samples
#set seed for pseudo-random sampling
set.seed(2021)
#create empty vector to store results
sample.means = vector("numeric", replicates) #calculate sample means
for(k in 1:replicates){
sample.rows = sample(1:nrow(yrbss), sample.size)
sample.means[k] = mean(yrbss$weight[sample.rows], na.rm = TRUE)
}
#create histogram of sample means
hist(sample.means, xlim = c(54, 87)) #xlim keeps the axis scale fixed
#draw a blue line at the mean of sample means
abline(v = mean(sample.means), col = "blue")
#draw a red line at the population mean weight in yrbss
abline(v = mean(yrbss$weight, na.rm = TRUE), col = "red")
#set parameters
sample.size = 500 # Size of each sample
replicates = 1000 # Number of random samples
#set seed for pseudo-random sampling
set.seed(2021)
#create empty vector to store results
sample.means = vector("numeric", replicates) #calculate sample means
for(k in 1:replicates){
sample.rows = sample(1:nrow(yrbss), sample.size)
sample.means[k] = mean(yrbss$weight[sample.rows], na.rm = TRUE)
}
#create histogram of sample means
hist(sample.means, xlim = c(54, 87)) #xlim keeps the axis scale fixed
#draw a blue line at the mean of sample means
abline(v = mean(sample.means), col = "blue")
#draw a red line at the population mean weight in yrbss
abline(v = mean(yrbss$weight, na.rm = TRUE), col = "red")
#create histogram of sample means
hist(sample.means) #xlim keeps the axis scale fixed
#draw a blue line at the mean of sample means
abline(v = mean(sample.means), col = "blue")
#draw a red line at the population mean weight in yrbss
abline(v = mean(yrbss$weight, na.rm = TRUE), col = "red")
#create histogram of sample means
hist(sample.means, xlim = c(54, 87)) #xlim keeps the axis scale fixed
#draw a blue line at the mean of sample means
abline(v = mean(sample.means), col = "blue")
#draw a red line at the population mean weight in yrbss
abline(v = mean(yrbss$weight, na.rm = TRUE), col = "red")
#set parameters
sample.size = 300 # Size of each sample
replicates = 1000 # Number of random samples
#set seed for pseudo-random sampling
set.seed(2021)
#create empty vector to store results
sample.means = vector("numeric", replicates) #calculate sample means
for(k in 1:replicates){
sample.rows = sample(1:nrow(yrbss), sample.size)
sample.means[k] = mean(yrbss$weight[sample.rows], na.rm = TRUE)
}
#create histogram of sample means
hist(sample.means, xlim = c(54, 87)) #xlim keeps the axis scale fixed
#draw a blue line at the mean of sample means
abline(v = mean(sample.means), col = "blue")
#draw a red line at the population mean weight in yrbss
abline(v = mean(yrbss$weight, na.rm = TRUE), col = "red")
#set parameters
sample.size = 200 # Size of each sample
replicates = 300 # Number of random samples
#set seed for pseudo-random sampling
set.seed(2021)
#create empty vector to store results
sample.means = vector("numeric", replicates) #calculate sample means
for(k in 1:replicates){
sample.rows = sample(1:nrow(yrbss), sample.size)
sample.means[k] = mean(yrbss$weight[sample.rows], na.rm = TRUE)
}
#create histogram of sample means
hist(sample.means, xlim = c(54, 87)) #xlim keeps the axis scale fixed
#draw a blue line at the mean of sample means
abline(v = mean(sample.means), col = "blue")
#draw a red line at the population mean weight in yrbss
abline(v = mean(yrbss$weight, na.rm = TRUE), col = "red")
mean(yrbss$weight)
mean(yrbss$weight, na.rm=T)
#set parameters
sample.size = 500 # Size of each sample
replicates = 1000 # Number of random samples
#set seed for pseudo-random sampling
set.seed(2021)
#create empty vector to store results
sample.means = vector("numeric", replicates) #calculate sample means
for(k in 1:replicates){
sample.rows = sample(1:nrow(yrbss), sample.size)
sample.means[k] = mean(yrbss$weight[sample.rows], na.rm = TRUE)
}
#create histogram of sample means
hist(sample.means, xlim = c(54, 87)) #xlim keeps the axis scale fixed
#draw a blue line at the mean of sample means
abline(v = mean(sample.means), col = "blue")
#draw a red line at the population mean weight in yrbss
abline(v = mean(yrbss$weight, na.rm = TRUE), col = "red")
mean(yrbss$weight, na.rm=T)
#set parameters
sample.size = 50 # Size of each sample
replicates = 50 # Number of random samples
#set seed for pseudo-random sampling
set.seed(2021)
#create empty vector to store results
sample.means = vector("numeric", replicates) #calculate sample means
for(k in 1:replicates){
sample.rows = sample(1:nrow(yrbss), sample.size)
sample.means[k] = mean(yrbss$weight[sample.rows], na.rm = TRUE)
}
#create histogram of sample means
hist(sample.means, xlim = c(54, 87)) #xlim keeps the axis scale fixed
#draw a blue line at the mean of sample means
abline(v = mean(sample.means), col = "blue")
#draw a red line at the population mean weight in yrbss
abline(v = mean(yrbss$weight, na.rm = TRUE), col = "red")
mean(yrbss$weight, na.rm=T)
abline(v = mean(sample.means), col = "blue")
#set parameters
sample.size = 100 # Size of each sample
replicates = 50 # Number of random samples
#set seed for pseudo-random sampling
set.seed(2021)
#create empty vector to store results
sample.means = vector("numeric", replicates) #calculate sample means
for(k in 1:replicates){
sample.rows = sample(1:nrow(yrbss), sample.size)
sample.means[k] = mean(yrbss$weight[sample.rows], na.rm = TRUE)
}
#create histogram of sample means
hist(sample.means, xlim = c(54, 87)) #xlim keeps the axis scale fixed
#draw a blue line at the mean of sample means
abline(v = mean(sample.means), col = "blue")
#draw a red line at the population mean weight in yrbss
abline(v = mean(yrbss$weight, na.rm = TRUE), col = "red")
mean(sample.means)
mean(yrbss$weight, na.rm = TRUE)
#set parameters
sample.size = 100 # Size of each sample
replicates = 100 # Number of random samples
#set seed for pseudo-random sampling
set.seed(2021)
#create empty vector to store results
sample.means = vector("numeric", replicates) #calculate sample means
for(k in 1:replicates){
sample.rows = sample(1:nrow(yrbss), sample.size)
sample.means[k] = mean(yrbss$weight[sample.rows], na.rm = TRUE)
}
#create histogram of sample means
hist(sample.means, xlim = c(54, 87)) #xlim keeps the axis scale fixed
#draw a blue line at the mean of sample means
abline(v = mean(sample.means), col = "blue")
#draw a red line at the population mean weight in yrbss
abline(v = mean(yrbss$weight, na.rm = TRUE), col = "red")
mean(sample.means)
mean(yrbss$weight, na.rm = TRUE)
#set parameters
sample.size = 100 # Size of each sample
replicates = 50 # Number of random samples
#set seed for pseudo-random sampling
set.seed(2021)
#create empty vector to store results
sample.means = vector("numeric", replicates) #calculate sample means
for(k in 1:replicates){
sample.rows = sample(1:nrow(yrbss), sample.size)
sample.means[k] = mean(yrbss$weight[sample.rows], na.rm = TRUE)
}
#create histogram of sample means
hist(sample.means, xlim = c(54, 87)) #xlim keeps the axis scale fixed
#draw a blue line at the mean of sample means
abline(v = mean(sample.means), col = "blue")
#draw a red line at the population mean weight in yrbss
abline(v = mean(yrbss$weight, na.rm = TRUE), col = "red")
mean(sample.means)
mean(yrbss$weight, na.rm = TRUE)
#set parameters
sample.size = 200 # Size of each sample
replicates = 10 # Number of random samples
#set seed for pseudo-random sampling
set.seed(2021)
#create empty vector to store results
sample.means = vector("numeric", replicates) #calculate sample means
for(k in 1:replicates){
sample.rows = sample(1:nrow(yrbss), sample.size)
sample.means[k] = mean(yrbss$weight[sample.rows], na.rm = TRUE)
}
#create histogram of sample means
hist(sample.means, xlim = c(54, 87)) #xlim keeps the axis scale fixed
#draw a blue line at the mean of sample means
abline(v = mean(sample.means), col = "blue")
#draw a red line at the population mean weight in yrbss
abline(v = mean(yrbss$weight, na.rm = TRUE), col = "red")
#set parameters
sample.size = 100 # Size of each sample
replicates = 30 # Number of random samples
#set seed for pseudo-random sampling
set.seed(2021)
#create empty vector to store results
sample.means = vector("numeric", replicates) #calculate sample means
for(k in 1:replicates){
sample.rows = sample(1:nrow(yrbss), sample.size)
sample.means[k] = mean(yrbss$weight[sample.rows], na.rm = TRUE)
}
#create histogram of sample means
hist(sample.means, xlim = c(54, 87)) #xlim keeps the axis scale fixed
#draw a blue line at the mean of sample means
abline(v = mean(sample.means), col = "blue")
#draw a red line at the population mean weight in yrbss
abline(v = mean(yrbss$weight, na.rm = TRUE), col = "red")
#set parameters
sample.size = 100 # Size of each sample
replicates = 40 # Number of random samples
#set seed for pseudo-random sampling
set.seed(2021)
#create empty vector to store results
sample.means = vector("numeric", replicates) #calculate sample means
for(k in 1:replicates){
sample.rows = sample(1:nrow(yrbss), sample.size)
sample.means[k] = mean(yrbss$weight[sample.rows], na.rm = TRUE)
}
#create histogram of sample means
hist(sample.means, xlim = c(54, 87)) #xlim keeps the axis scale fixed
#draw a blue line at the mean of sample means
abline(v = mean(sample.means), col = "blue")
#draw a red line at the population mean weight in yrbss
abline(v = mean(yrbss$weight, na.rm = TRUE), col = "red")
#set parameters
sample.size = 100 # Size of each sample
replicates = 50 # Number of random samples
#set seed for pseudo-random sampling
set.seed(2021)
#create empty vector to store results
sample.means = vector("numeric", replicates) #calculate sample means
for(k in 1:replicates){
sample.rows = sample(1:nrow(yrbss), sample.size)
sample.means[k] = mean(yrbss$weight[sample.rows], na.rm = TRUE)
}
#create histogram of sample means
hist(sample.means, xlim = c(54, 87)) #xlim keeps the axis scale fixed
#draw a blue line at the mean of sample means
abline(v = mean(sample.means), col = "blue")
#draw a red line at the population mean weight in yrbss
abline(v = mean(yrbss$weight, na.rm = TRUE), col = "red")
#set parameters
sample.size = 500 # Size of each sample
replicates = 1000 # Number of random samples
#set seed for pseudo-random sampling
set.seed(2021)
#create empty vector to store results
sample.means = vector("numeric", replicates) #calculate sample means
for(k in 1:replicates){
sample.rows = sample(1:nrow(yrbss), sample.size)
sample.means[k] = mean(yrbss$weight[sample.rows], na.rm = TRUE)
}
#create histogram of sample means
hist(sample.means, xlim = c(54, 87)) #xlim keeps the axis scale fixed
#draw a blue line at the mean of sample means
abline(v = mean(sample.means), col = "blue")
#draw a red line at the population mean weight in yrbss
abline(v = mean(yrbss$weight, na.rm = TRUE), col = "red")
mean(sample.means)
mean(yrbss$weight, na.rm = TRUE)
#set parameters
sample.size = 25 # Size of each sample
replicates = 1000 # Number of random samples
#set seed for pseudo-random sampling
set.seed(2021)
#create empty vector to store results
sample.means = vector("numeric", replicates) #calculate sample means
for(k in 1:replicates){
sample.rows = sample(1:nrow(yrbss), sample.size)
sample.means[k] = mean(yrbss$weight[sample.rows], na.rm = TRUE)
}
#create histogram of sample means
hist(sample.means, xlim = c(54, 87)) #xlim keeps the axis scale fixed
#draw a blue line at the mean of sample means
abline(v = mean(sample.means), col = "blue")
#draw a red line at the population mean weight in yrbss
abline(v = mean(yrbss$weight, na.rm = TRUE), col = "red")
mean(sample.means)
mean(yrbss$weight, na.rm = TRUE)
?randomforest
randomForest?
q
?rf
?randomForest
#### Data Load and Subset ####
setwd('C:/Users/jeres/Documents/GitHub/DAEN-690-Capstone-Project/Data')
data_nhanes <- read.csv('NHANES_Data.csv', header = T, sep = ',')
colnames(data_nhanes)
setwd('C:/Users/prahi/Desktop/DAEN 690 - Capstone/Final Project - GitHub Repo/DAEN-690-Capstone-Project/Data')
#### Data Load and Subset ####
setwd('C:/Users/jeres/Documents/GitHub/DAEN-690-Capstone-Project/Data')
setwd('C:/Users/prahi/Desktop/DAEN 690 - Capstone/Final Project - GitHub Repo/DAEN-690-Capstone-Project/Data')
data_nhanes <- read.csv('NHANES_Data.csv', header = T, sep = ',')
colnames(data_nhanes)
nhanes_trim <- subset(data_nhanes, select=-c(ï..Measured_Diabetes_A1c, Measured_Diabetes, Dr_Diabetes_Binary, Dr_Diabetes, Pre_Dia, SEQN, AHH_Income,
FAM_Income, Weight_kg, Height_cm, Len_Leg, Len_Arm, Waist, Fasting_Glucose, Private_Insurance))
colnames(nhanes_trim)
zeroVarpred <- nearZeroVar(nhanes_trim)
colnames(nhanes_trim[,zeroVarpred])
names <- c('Measured_Diabetes_x2', 'Gender','Race','Birth_Country','Citizenship','Edu_Adult','Marital_Status','Health_Insurance')
library(caret)
library(ggplot2)
library(randomForest)
library(dplyr)
setwd('C:/Users/prahi/Desktop/DAEN 690 - Capstone/Final Project - GitHub Repo/DAEN-690-Capstone-Project/Data')
data_nhanes <- read.csv('NHANES_Data.csv', header = T, sep = ',')
colnames(data_nhanes)
nhanes_trim <- subset(data_nhanes, select=-c(ï..Measured_Diabetes_A1c, Measured_Diabetes, Dr_Diabetes_Binary, Dr_Diabetes, Pre_Dia, SEQN, AHH_Income,
FAM_Income, Weight_kg, Height_cm, Len_Leg, Len_Arm, Waist, Fasting_Glucose, Private_Insurance))
colnames(nhanes_trim)
zeroVarpred <- nearZeroVar(nhanes_trim)
colnames(nhanes_trim[,zeroVarpred])
names <- c('Measured_Diabetes_x2', 'Gender','Race','Birth_Country','Citizenship','Edu_Adult','Marital_Status','Health_Insurance')
nhanes_trim[,names] <- lapply(nhanes_trim[,names], as.factor)
levels(nhanes_trim$Gender) <- c('Male','Female')
levels(nhanes_trim$Race) <- c('Mexican','Hispanic','White','Black','Asian','Other')
levels(nhanes_trim$Birth_Country) <- c('USA','Other')
levels(nhanes_trim$Citizenship) <- c('Citizen','Non_Citizen')
levels(nhanes_trim$Edu_Adult) <- c('Below9th','Between9-11','HS_Grad','Some_College','College_Grad')
levels(nhanes_trim$Marital_Status) <- c('Married','Widowed','Divorced','Separated','Never_Married','Living_with_partner')
levels(nhanes_trim$Health_Insurance) <- c('Yes','No')
rm_nas <- na.omit(nhanes_trim)
non_AA <- subset(nhanes_trim, Race!='Black')
table(non_AA$Race)
only_AA <- subset(nhanes_trim, Race == 'Black')
table(only_AA$Race)
response_non_AA <- non_AA[,'Measured_Diabetes_x2']
response_only_AA <- only_AA[,'Measured_Diabetes_x2']
View(nhanes_trim)
View(nhanes_trim)
names <- c('Measured_Diabetes_x2', 'Gender','Race','Birth_Country','Citizenship','Edu_Adult','Marital_Status','Health_Insurance')
nhanes_trim[,names] <- lapply(nhanes_trim[,names], as.factor)
levels(nhanes_trim$Gender) <- c('Male','Female')
levels(nhanes_trim$Race) <- c('Mexican','Hispanic','White','Black','Asian','Other')
levels(nhanes_trim$Birth_Country) <- c('USA','Other')
levels(nhanes_trim$Citizenship) <- c('Citizen','Non_Citizen')
levels(nhanes_trim$Edu_Adult) <- c('Below9th','Between9-11','HS_Grad','Some_College','College_Grad')
levels(nhanes_trim$Marital_Status) <- c('Married','Widowed','Divorced','Separated','Never_Married','Living_with_partner')
levels(nhanes_trim$Health_Insurance) <- c('Yes','No')
rm_nas <- na.omit(nhanes_trim)
non_AA <- subset(nhanes_trim, Race!='Black')
table(non_AA$Race)
only_AA <- subset(nhanes_trim, Race == 'Black')
table(only_AA$Race)
response_non_AA <- non_AA[,'Measured_Diabetes_x2']
response_only_AA <- only_AA[,'Measured_Diabetes_x2']
non_AA <- non_AA[,-1]
only_AA <- only_AA[,-1]
# 70%
set.seed(0)
index_non_AA <- createDataPartition(response_non_AA, p=0.7, list=FALSE)
predictorTraining_non_AA <- non_AA[index_non_AA,]
predictorTesting_non_AA <- non_AA[-index_non_AA,]
responseTraining_non_AA <- response_non_AA[index_non_AA]
responseTesting_non_AA <- response_non_AA[-index_non_AA]
#params
RFGrid <- expand.grid(.mtry = 3:6)
RFparams <- trainControl(method = 'cv', number = 10, classProbs = TRUE, savePredictions = TRUE)
# 5%  African American
set.seed(0)
index_AA5 <- createDataPartition(response_only_AA, p=0.05, list=FALSE)
predictorTraining_only_AA5 <- only_AA[index_AA5,]
predictorTesting_only_AA5 <- only_AA[-index_AA5,]
responseTraining_only_AA5 <- response_only_AA[index_AA5]
responseTesting_only_AA5 <- response_only_AA[-index_AA5]
# 5% Predictor Training
predictorTraining_all5 <- rbind(predictorTraining_only_AA5, predictorTraining_non_AA)
nrow(predictorTraining_only_AA5)
nrow(predictorTraining_non_AA)
nrow(predictorTraining_all5)
# 5% Predictor Testing
predictorTesting_all5 <- rbind(predictorTesting_only_AA5, predictorTesting_non_AA)
nrow(predictorTesting_only_AA5)
nrow(predictorTesting_non_AA)
nrow(predictorTesting_all5)
# 5% Response Training
responseTraining_all5 <- c(responseTraining_only_AA5, responseTraining_non_AA)
length(responseTraining_only_AA5)
length(responseTraining_non_AA)
length(responseTraining_all5)
# 5% Response Testing
responseTesting_all5 <- c(responseTesting_only_AA5, responseTesting_non_AA)
length(responseTesting_only_AA5)
length(responseTesting_non_AA)
length(responseTesting_all5)
responseTraining_all5 <- factor(responseTraining_all5)
responseTesting_all5 <- factor(responseTesting_all5)
levels(responseTraining_all5) <- c('No_Risk', 'Risk')
levels(responseTesting_all5) <- c('No_Risk', 'Risk')
# 5% Training Random Forest
set.seed(0)
RFmodel <- train(predictorTraining_all5,responseTraining_all5,method="rf",
trControl = RFparams,
tuneGrid = RFGrid)
####model without subsampling AAs#####
response_all <- rm_nas[,'Measured_Diabetes_x2']
pred_all <- rm_nas[,-1]
set.seed(0)
index_all <- createDataPartition(response_all, p=0.7, list=FALSE)
pred_train_all <- pred_all[index_all,]
pred_test_all <- pred_all[-index_all,]
resp_train_all <- response_all[index_all]
resp_test_all <- response_all[-index_all]
resp_train_all <- factor(resp_train_all)
resp_test_all <- factor(resp_test_all)
levels(resp_train_all) <- c('No_Risk', 'Risk')
levels(resp_test_all) <- c('No_Risk', 'Risk')
set.seed(0)
RFmodel_all <- train(pred_train_all,resp_train_all,method="rf",
trControl = RFparams,
tuneGrid = RFGrid)
RFmodel_all
RFmodel_all$bestTune
RFmodel_all$results[2,] #these are the optimal model params
RFmerge_all <- merge(RFmodel_all$pred,  RFmodel_all$bestTune)
RFPredictions_all <- predict(RFmodel_all, newdata=pred_test_all)
RFAssess_all <- data.frame(obs=resp_test_all, pred = RFPredictions_all)
defaultSummary(RFAssess_all)
confusionMatrix(RFPredictions_all, reference = resp_test_all, positive='Risk')
test_all <- pred_test_all
test_all['predictions'] <- RFPredictions_all
test_all['actual_vals'] <- resp_test_all
test_all <- test_all %>% mutate(Results = if_else(predictions ==actual_vals, 1, 0))
table(test_all$Race, test_all$Results)
